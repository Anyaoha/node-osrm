language: cpp

os:
  - linux
  - osx

compiler:
 - clang
 - gcc

matrix:
  exclude:
     - os: osx
       compiler: gcc
     - os: linux
       compiler: clang

env:
  matrix:
   - NVM_NODE_VERSION="0.10.36"
   - NVM_NODE_VERSION="0.12.0"
  global:
   - secure: KitzGZjoDblX/3heajcvssGz0JnJ/k02dr2tu03ksUV+6MogC3RSQudqyKY57+f8VyZrcllN/UOlJ0Q/3iG38Oz8DljC+7RZxtkVmE1SFBoOezKCdhcvWM12G3uqPs7hhrRxuUgIh0C//YXEkulUrqa2H1Aj2xeen4E3FAqEoy0=
   - secure: WLGmxl6VTVWhXGm6X83GYNYzPNsvTD+9usJOKM5YBLAdG7cnOBQBNiCCUKc9OZMMZVUr3ec2/iigakH5Y8Yc+U6AlWKzlORyqWLuk4nFuoedu62x6ocQkTkuOc7mHiYhKd21xTGMYauaZRS6kugv4xkpGES2UjI2T8cjZ+LN2jU=

before_install:
# check if tag exists and matches package.json
- scripts/validate_tag.sh
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put node-pre-gyp on path
- export PATH=./node_modules/.bin/:$PATH
# here we set up the node version on the fly based on the matrix value.
# This is done manually so that it is easy to flip the 'language' to
# objective-c in another branch (to run the same travis.yml on OS X)
- rm -rf ~/.nvm/ && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm
- source ~/.nvm/nvm.sh
- nvm install $NVM_NODE_VERSION
- nvm use $NVM_NODE_VERSION
- node --version
- npm --version
- which node
- "if [[ `uname -s` == 'Linux' ]]; then sudo add-apt-repository -y ppa:kalakris/cmake && sudo apt-get update -qq && sudo apt-get install cmake pkg-config; fi"
- if [[ `uname -s` == 'Darwin' ]]; then brew install pkg-config; fi

install:
# set a few env settings for the static build script
- NODE_MODULE_ROOT=`pwd`
- export OSRM_RELEASE="v4.6.1"
# WARNING: this script modifies the environment
- source ./scripts/static_build.sh

before_script:
- if [[ `uname -s` == 'Darwin' ]]; then otool -L ./lib/binding/* || true; fi
- if [[ `uname -s` == 'Linux' ]]; then readelf -d ./lib/binding/* || true; fi
- which osrm-extract||true;rm -rf ${TMP_DEPS_DIR};which osrm-extract||true;
- make test

script:
- node-pre-gyp package
- if [[ ${COMMIT_MESSAGE} =~ "[publish binary]" ]]; then
    node-pre-gyp publish;
  fi;
- if [[ ${COMMIT_MESSAGE} =~ "[republish binary]" ]]; then
    node-pre-gyp unpublish publish;
  fi;
